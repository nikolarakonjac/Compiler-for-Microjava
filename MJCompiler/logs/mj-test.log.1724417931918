INFO  14:58:45,149 - Compiling source file: C:\Users\Nikola\Documents\ETF_NIKOLA\IV\sedmi semestar\prevodioci\domaci leksicka analiza\workspace\MJCompiler\test\program.mj
INFO  14:58:45,204 - #2 program
INFO  14:58:45,204 - #43 test301
INFO  14:58:45,205 - #5 const
INFO  14:58:45,206 - #43 int
INFO  14:58:45,206 - #43 nula
INFO  14:58:45,207 - #10 =
INFO  14:58:45,208 - #40 0
INFO  14:58:45,208 - #6 ;
INFO  14:58:45,209 - #5 const
INFO  14:58:45,210 - #43 int
INFO  14:58:45,210 - #43 jedan
INFO  14:58:45,210 - #10 =
INFO  14:58:45,210 - #40 1
INFO  14:58:45,210 - #6 ;
INFO  14:58:45,210 - #5 const
INFO  14:58:45,210 - #43 int
INFO  14:58:45,210 - #43 pet
INFO  14:58:45,211 - #10 =
INFO  14:58:45,211 - #40 5
INFO  14:58:45,217 - #6 ;
INFO  14:58:45,217 - #43 int
INFO  14:58:45,217 - #43 niz
INFO  14:58:45,218 - #8 [
INFO  14:58:45,219 - #9 ]
INFO  14:58:45,219 - #6 ;
INFO  14:58:45,219 - #43 char
INFO  14:58:45,220 - #43 nizch
INFO  14:58:45,221 - #8 [
INFO  14:58:45,221 - #9 ]
INFO  14:58:45,221 - #6 ;
INFO  14:58:45,221 - #43 int
INFO  14:58:45,221 - #43 mat
INFO  14:58:45,221 - #8 [
INFO  14:58:45,221 - #9 ]
INFO  14:58:45,221 - #8 [
INFO  14:58:45,221 - #9 ]
INFO  14:58:45,221 - #6 ;
INFO  14:58:45,222 - #3 {
INFO  14:58:45,222 - #11 void
INFO  14:58:45,223 - #43 main
INFO  14:58:45,223 - #29 (
INFO  14:58:45,223 - #24 )
INFO  14:58:45,224 - #43 int
INFO  14:58:45,225 - #43 bodovi
INFO  14:58:45,225 - #6 ;
INFO  14:58:45,225 - #43 bool
INFO  14:58:45,225 - #43 bt
INFO  14:58:45,225 - #6 ;
INFO  14:58:45,225 - #43 char
INFO  14:58:45,225 - #43 c
INFO  14:58:45,226 - #6 ;
INFO  14:58:45,226 - #3 {
INFO  14:58:45,226 - #43 mat
INFO  14:58:45,227 - #10 =
INFO  14:58:45,227 - #19 new
INFO  14:58:45,227 - #43 char
INFO  14:58:45,228 - #8 [
INFO  14:58:45,228 - #40 2
INFO  14:58:45,228 - #9 ]
INFO  14:58:45,228 - #8 [
INFO  14:58:45,228 - #40 6
INFO  14:58:45,228 - #9 ]
INFO  14:58:45,228 - #6 ;
INFO  14:58:45,228 - #4 }
INFO  14:58:45,229 - #4 }
INFO  14:58:45,238 - Program(
  ProgramName(
   test301
  ) [ProgramName]
  DeclarationListVar(
    DeclarationListVar(
      DeclarationListVar(
        DeclarationListConst(
          DeclarationListConst(
            DeclarationListConst(
              NoDeclarationList(
              ) [NoDeclarationList]
              ConstDecl(
                ConstTypeAndNameDecl(
                  TypeName(
                   int
                  ) [TypeName]
                 nula
                ) [ConstTypeAndNameDecl]
                NumberConstValue(
                 0
                ) [NumberConstValue]
                NoConstAssignmentList(
                ) [NoConstAssignmentList]
              ) [ConstDecl]
            ) [DeclarationListConst]
            ConstDecl(
              ConstTypeAndNameDecl(
                TypeName(
                 int
                ) [TypeName]
               jedan
              ) [ConstTypeAndNameDecl]
              NumberConstValue(
               1
              ) [NumberConstValue]
              NoConstAssignmentList(
              ) [NoConstAssignmentList]
            ) [ConstDecl]
          ) [DeclarationListConst]
          ConstDecl(
            ConstTypeAndNameDecl(
              TypeName(
               int
              ) [TypeName]
             pet
            ) [ConstTypeAndNameDecl]
            NumberConstValue(
             5
            ) [NumberConstValue]
            NoConstAssignmentList(
            ) [NoConstAssignmentList]
          ) [ConstDecl]
        ) [DeclarationListConst]
        VarDecl(
          VarDeclType(
            TypeName(
             int
            ) [TypeName]
          ) [VarDeclType]
          SingleVarDeclaration(
            VarDeclArrayFinal(
             niz
            ) [VarDeclArrayFinal]
          ) [SingleVarDeclaration]
        ) [VarDecl]
      ) [DeclarationListVar]
      VarDecl(
        VarDeclType(
          TypeName(
           char
          ) [TypeName]
        ) [VarDeclType]
        SingleVarDeclaration(
          VarDeclArrayFinal(
           nizch
          ) [VarDeclArrayFinal]
        ) [SingleVarDeclaration]
      ) [VarDecl]
    ) [DeclarationListVar]
    VarDecl(
      VarDeclType(
        TypeName(
         int
        ) [TypeName]
      ) [VarDeclType]
      SingleVarDeclaration(
        VarDeclMatrixFinal(
         mat
        ) [VarDeclMatrixFinal]
      ) [SingleVarDeclaration]
    ) [VarDecl]
  ) [DeclarationListVar]
  MethodDeclarationList(
    NoMethodDeclarationList(
    ) [NoMethodDeclarationList]
    MethodDecl(
      MethodReturnTypeVoid(
       main
      ) [MethodReturnTypeVoid]
      NoFormalParams(
      ) [NoFormalParams]
      VarDeclarationList(
        VarDeclarationList(
          VarDeclarationList(
            NoVarDeclarationList(
            ) [NoVarDeclarationList]
            VarDecl(
              VarDeclType(
                TypeName(
                 int
                ) [TypeName]
              ) [VarDeclType]
              SingleVarDeclaration(
                VarDeclFinalElem(
                 bodovi
                ) [VarDeclFinalElem]
              ) [SingleVarDeclaration]
            ) [VarDecl]
          ) [VarDeclarationList]
          VarDecl(
            VarDeclType(
              TypeName(
               bool
              ) [TypeName]
            ) [VarDeclType]
            SingleVarDeclaration(
              VarDeclFinalElem(
               bt
              ) [VarDeclFinalElem]
            ) [SingleVarDeclaration]
          ) [VarDecl]
        ) [VarDeclarationList]
        VarDecl(
          VarDeclType(
            TypeName(
             char
            ) [TypeName]
          ) [VarDeclType]
          SingleVarDeclaration(
            VarDeclFinalElem(
             c
            ) [VarDeclFinalElem]
          ) [SingleVarDeclaration]
        ) [VarDecl]
      ) [VarDeclarationList]
      StatementListExist(
        StatementListDoesntExist(
        ) [StatementListDoesntExist]
        StatementDesignatorStatement(
          DesignatorStatementAssign(
            DesignatorIdent(
             mat
            ) [DesignatorIdent]
            Assignop(
            ) [Assignop]
            ExprTerm(
              TermFactor(
                FactorNewFactor(
                  NewFactorMatrix(
                    TypeName(
                     char
                    ) [TypeName]
                    ExprTerm(
                      TermFactor(
                        FactorNumber(
                         2
                        ) [FactorNumber]
                      ) [TermFactor]
                    ) [ExprTerm]
                    ExprTerm(
                      TermFactor(
                        FactorNumber(
                         6
                        ) [FactorNumber]
                      ) [TermFactor]
                    ) [ExprTerm]
                  ) [NewFactorMatrix]
                ) [FactorNewFactor]
              ) [TermFactor]
            ) [ExprTerm]
          ) [DesignatorStatementAssign]
        ) [StatementDesignatorStatement]
      ) [StatementListExist]
    ) [MethodDecl]
  ) [MethodDeclarationList]
) [Program]
INFO  14:58:45,238 - ===================================
ERROR 14:58:45,242 - Greska pri alokaciji matrice, tipovi se ne poklapaju na liniji 23
INFO  14:58:45,242 - ===================================
ERROR 14:58:45,243 - Parsiranje NIJE uspesno zavrseno!
