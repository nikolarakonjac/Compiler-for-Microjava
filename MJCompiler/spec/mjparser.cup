package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	errorDetected = true;
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


init with {:
	errorDetected = false;
:}



/* ------------------------ TERMINALS ----------------------------- */

terminal PROGRAM, LBRACE, RBRACE, CONST, SEMICOLON, COMMA, LBRACKET, RBRACKET, ASSIGN, VOID, MINUS, INC, DEC, OR, AND;
terminal IF, ELSE, NEW, BREAK, CONTINUE, RETURN, PLUS, RPAREN, STATIC, DIV, NOT_EQUAL, ARROW, LPAREN, EQUAL, LESS, MOD, MUL, GREATER, GREATER_EQUAL, LESS_EQUAL;
terminal READ, PRINT, COLON;


terminal Integer NUMBER;
terminal Character CHAR;
terminal Boolean BOOL;
terminal String IDENT;

/* terminals needed because of Yylex.java*/

terminal FOR, EXTENDS, DOT;
terminal RANGE, NAMESPACE, CLASS;

/* ------------------------ NONTERMINALS ----------------------------- */

nonterminal DeclarationList, MethodDeclList, ConstDecl, VarDecl, ConstAssign, ConstAssignList;
nonterminal VarDeclaration, VarDeclarations, VarDeclList, StatementList, FormPars, FormalParam, FormalParams;
nonterminal Statement, DesignatorStatement, Label, NewFactor, ExprFactor;
nonterminal ActParsOptional, ActPars, StaticInitializer, CondFact, Condition, CondTerm, FinalVarDeclaration;
nonterminal Relop, Assignop, Addop, Mulop; 


/* nonterminals added in semantic analysis phase */

nonterminal VarDeclType, ConstTypeAndNameDecl, ConstName;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program, MethodDecl, MethodReturnTypeAndName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, DesignatorFactor, Factor, Term, Expr; 

/* can be used only for this case*/
precedence left ELSE;

/* ------------------------ GRAMMAR ----------------------------- */

Program ::= (Program) PROGRAM ProgramName:p DeclarationList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programNameAtr;

DeclarationList ::= (DeclarationListConst) DeclarationList ConstDecl
                |
                (DeclarationListVar) DeclarationList VarDecl
                |
                (NoDeclarationList) /* epsilon */
                ;

/* ********************************** */       
 
ConstDecl ::= (ConstDecl) CONST ConstTypeAndNameDecl ASSIGN ConstAssign ConstAssignList SEMICOLON;

ConstTypeAndNameDecl ::= (ConstTypeAndNameDecl) Type:constType IDENT:constName;

ConstAssign ::= (NumberConstValue) NUMBER:numConst
			|
			(CharConstValue) CHAR:charConst
			|
			(BoolConstValue) BOOL:boolConst
			;

ConstAssignList ::= (ConstAssignmentList) ConstAssignList COMMA ConstName ASSIGN ConstAssign 
				|
				(NoConstAssignmentList) /* epsilon */
				;
				
ConstName ::= (ConstName) IDENT:constName;			

/* ******************************************************************************************* */ 

VarDecl ::= (VarDecl) VarDeclType:varDeclType VarDeclarations;

VarDeclType ::= (VarDeclType) Type;

VarDeclarations ::= (MultipleVarDeclaration) VarDeclaration VarDeclarations
				|
				(SingleVarDeclaration) FinalVarDeclaration
				;


FinalVarDeclaration ::= (VarDeclFinalElem) IDENT:identName SEMICOLON
					|
					(VarDeclArrayFinal) IDENT:arrayName LBRACKET RBRACKET SEMICOLON
					|
					(VarDeclErrorSemi) error SEMICOLON:l
					{: parser.report_error("oporavak od greske za definiciju globalne promenljive do znaka ; na liniji: " + lleft, null); :}
					;


VarDeclaration ::= (VarDeclNextElem) IDENT:identName COMMA
				| 
				(VarDeclNextArray) IDENT:arrayName LBRACKET RBRACKET COMMA
				|
				(VarDeclErrorComma) error COMMA:l 
				{: parser.report_error("oporavak od greske za definiciju globalne promenljive do znaka , na liniji: " + lleft, null); :}
				;


VarDeclList ::= (VarDeclarationList) VarDeclList VarDecl
			|
			(NoVarDeclarationList) /* epsilon */
			;
			
			
				
Type ::= (ScopeResolution) IDENT COLON COLON IDENT
       |
       (TypeName) IDENT:typeName
       ;
       

       
/* ********************************************************************************** */ 	
	
MethodDeclList ::= (MethodDeclarationList) MethodDeclList MethodDecl
				|
				(NoMethodDeclarationList) /* epsilon */	
				;


MethodDecl ::= (MethodDecl) MethodReturnTypeAndName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList  RBRACE;		
				
MethodReturnTypeAndName ::= (MethodReturnTypeVoid) VOID:retType IDENT:methodName
						|
						(MethodReturnTypeNoVoid) Type:retType IDENT:methodName
						;
								
FormPars ::= (FormParsExist) FormalParams
			|
			(NoFormalParams) /* epsilon */
			;			
				
FormalParams ::= (FormalParamsList) FormalParams COMMA FormalParam
				|
				(SingleFormalParam) FormalParam
				;  			
				
FormalParam ::= (VariableFormalParam) Type IDENT
			|
			(ArrayFormalParam) Type IDENT LBRACKET RBRACKET
			; 			

/*	****************************************		*/
				
StatementList ::= (StatementListExist) StatementList Statement
				|
				(StatementListDoesntExist) /* epsilon */		
				;		

Statement ::= (StatementDesignatorStatement) DesignatorStatement
			|
			(StatementIf) IF LPAREN Condition RPAREN Statement
			|
			(StatementIfElse) IF LPAREN Condition RPAREN Statement ELSE Statement
			|
			(StatementBreak) BREAK SEMICOLON
			|
			(StatementContinue) CONTINUE SEMICOLON
			|
			(StatementReturn) RETURN SEMICOLON
			|
			(StatementReturnWithExpr) RETURN Expr SEMICOLON
			|
			(StatementRead) READ LPAREN Designator RPAREN SEMICOLON
			|
			(StatementPrintExpr) PRINT LPAREN Expr RPAREN SEMICOLON
			|
			(StatementPrintExprNumber) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMICOLON
			|
			(StatementStatementList) LBRACE StatementList RBRACE
			;


DesignatorStatement ::= (DesignatorStatementAssign) Designator Assignop Expr SEMICOLON
					|
					(DesignatorStatementMethod) Designator LPAREN ActParsOptional RPAREN SEMICOLON
					|
					(DesignatorStatementInc) Designator INC SEMICOLON
					|
					(DesignatorStatementDec) Designator DEC SEMICOLON
					|
					(DesignatorStatementErrorSemi) error SEMICOLON:l 
					{: parser.report_error("oporavak od greske za iskaz dodele do znaka ; na liniji: " + lleft, null); :}
					;

Designator ::= (DesignatorScopeResolution) IDENT COLON COLON IDENT
			|
			(DesignatorIdent) IDENT:designatorName
			|
			(DesignatorDotAccess) Designator DOT IDENT
			|
			(DesignatorArray) Designator LBRACKET Expr RBRACKET
			;

Expr ::= (ExprMinusTerm) MINUS Term
        |
        (ExprTerm) Term
        |
        (ExprAdd) Expr Addop Term
        ;
        
Term ::= (TermFactor) Factor
		|
		(TermMul) Term Mulop Factor
		;
		
Factor ::= (FactorNumber) NUMBER
		|
		(FactorChar) CHAR
		|
		(FactorBool) BOOL
		|
		(FactorDesignatorFactor) DesignatorFactor
		|
		(FactorNewFactor) NewFactor
		|
		(FactorExprFactor) ExprFactor
		;
		
DesignatorFactor ::= (DesignatorFactorDesignator) Designator
					|
					(DesignatorFactorMethod) Designator:func LPAREN ActParsOptional RPAREN
					;
					
NewFactor ::= (NewFactorArray) NEW Type LBRACKET Expr RBRACKET
			|
			(NewFactorMethod) NEW Type LPAREN ActParsOptional RPAREN
			;
			
ExprFactor ::= (ExprFactor) LPAREN Expr RPAREN;


ActParsOptional ::= (ActParsExist) ActPars
		|
		(NoActPars) /* epsilon */
		;

ActPars ::= (SingleActParsExpr) Expr
		|
		(ActParsList) ActPars COMMA Expr
		;	
		
StaticInitializer ::= (StaticInitializer) STATIC LBRACE StatementList RBRACE;
		
/* *********************************************** */	

Condition ::= (ConditionCondTerm) CondTerm 
			|
			(ConditionOr) Condition OR CondTerm
			;

CondTerm ::= (CondTermFactor) CondFact 
			|
			(CondTermAnd) CondTerm AND CondFact
			;

CondFact ::= (CondFactMultiple) Expr Relop Expr
			|
			(CondFactExpr) Expr
			;
			

/* *********************************************** */

Label ::= (Label) IDENT;

Assignop ::= (Assignop) ASSIGN;
				
Relop ::= (EqualOperator) EQUAL
        |
        (NotEqualOperator) NOT_EQUAL
        |
        (GreaterOperator) GREATER
        |
        (GreaterEqualOperator) GREATER_EQUAL
        |
        (LessOperator) LESS
        |
        (LessEqualOperator) LESS_EQUAL
        ;			
				
Addop ::= (PlusOperator) PLUS
        |
        (MinusOperator) MINUS	
        ;			
				
Mulop ::= (MulOperator) MUL
        |
        (DivOperator) DIV
        |
        (ModOperator) MOD
        ;				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				