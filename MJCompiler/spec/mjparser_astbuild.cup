package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	errorDetected = true;
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


init with {:
	errorDetected = false;
:}



/* ------------------------ TERMINALS ----------------------------- */

terminal PROGRAM, IDENT, LBRACE, RBRACE, CONST, SEMICOLON, NUMBER, CHAR, BOOL, COMMA, LBRACKET, RBRACKET, ASSIGN, VOID, MINUS, INC, DEC, OR, AND;
terminal IF, ELSE, NEW, BREAK, CONTINUE, RETURN, PLUS, RPAREN, STATIC, DIV, NOT_EQUAL, ARROW, LPAREN, EQUAL, LESS, MOD, MUL, GREATER, GREATER_EQUAL, LESS_EQUAL;
terminal READ, PRINT, COLON;

/* terminals needed because of Yylex.java*/

terminal FOR, EXTENDS, DOT;
terminal RANGE, NAMESPACE, CLASS;

/* ------------------------ NONTERMINALS ----------------------------- */

nonterminal Program Program;
nonterminal DeclarationList DeclarationList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ConstAssign ConstAssign;
nonterminal ConstAssignList ConstAssignList;
nonterminal Type Type;
nonterminal VarDeclaration VarDeclaration;
nonterminal VarDeclarations VarDeclarations;
nonterminal MethodDecl MethodDecl;
nonterminal VarDeclList VarDeclList;
nonterminal StatementList StatementList;
nonterminal FormPars FormPars;
nonterminal FormalParam FormalParam;
nonterminal FormalParams FormalParams;
nonterminal MethodReturnTypeAndName MethodReturnTypeAndName;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Designator Designator;
nonterminal  Expr Expr;
nonterminal Label Label;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal DesignatorFactor DesignatorFactor;
nonterminal NewFactor NewFactor;
nonterminal ExprFactor ExprFactor;
nonterminal ActParsOptional ActParsOptional;
nonterminal ActPars ActPars;
nonterminal StaticInitializer StaticInitializer;
nonterminal CondFact CondFact;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal FinalVarDeclaration FinalVarDeclaration;
nonterminal Relop Relop;
nonterminal Assignop Assignop;
nonterminal Addop Addop;
nonterminal Mulop Mulop; 


/* can be used only for this case*/
precedence left ELSE;

/* ------------------------ GRAMMAR ----------------------------- */

Program ::= (Program) PROGRAM IDENT:programName DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(D1, M2); RESULT.setLine(D1left); :};

DeclarationList ::= (DeclarationListConst) DeclarationList:D1 ConstDecl:C2 {: RESULT=new DeclarationListConst(D1, C2); RESULT.setLine(D1left); :}
                |
                (DeclarationListVar) DeclarationList:D1 VarDecl:V2 {: RESULT=new DeclarationListVar(D1, V2); RESULT.setLine(D1left); :}
                |
                (NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */
                ;
                
ConstDecl ::= (ConstDeclaration) CONST Type:constType IDENT:constIdent ASSIGN ConstAssign:C1 ConstAssignList:C2 SEMICOLON {: RESULT=new ConstDeclaration(constType, C1, C2); RESULT.setLine(constTypeleft); :};

ConstAssign ::= (NumberConstValue) NUMBER {: RESULT=new NumberConstValue(); :}
			|
			(CharConstValue) CHAR {: RESULT=new CharConstValue(); :}
			|
			(BoolConstValue) BOOL {: RESULT=new BoolConstValue(); :}
			;

ConstAssignList ::= (ConstAssignmentList) ConstAssignList:C1 COMMA IDENT ASSIGN ConstAssign:C2 {: RESULT=new ConstAssignmentList(C1, C2); RESULT.setLine(C1left); :}
				|
				(NoConstAssignmentList) {: RESULT=new NoConstAssignmentList(); :} /* epsilon */
				;

VarDecl ::= (VarDecl) Type:T1 VarDeclarations:V2 {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :};

VarDeclarations ::= (VarDeclarationList) VarDeclaration:V1 VarDeclarations:V2 {: RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); :}
				|
				(SingleVarDeclaration) FinalVarDeclaration:F1 {: RESULT=new SingleVarDeclaration(F1); RESULT.setLine(F1left); :}
				;
				
FinalVarDeclaration ::= IDENT SEMICOLON {: RESULT=new FinalVarDeclarationDerived1(); :}
					|
					IDENT LBRACKET RBRACKET SEMICOLON {: RESULT=new FinalVarDeclarationDerived2(); :}
					|
					error SEMICOLON:l
					{: parser.report_error("oporavak od greske za definiciju globalne promenljive do znaka ; na liniji: " + lleft, null); :} {: RESULT=new FinalVarDeclarationDerived3(); :}
					;

VarDeclaration ::= (VarDeclaration) IDENT COMMA {: RESULT=new VarDeclaration(); :}
				| 
				(ArrayVarDeclaration) IDENT LBRACKET RBRACKET COMMA {: RESULT=new ArrayVarDeclaration(); :}
				|
				error COMMA:l 
				{: parser.report_error("oporavak od greske za definiciju globalne promenljive do znaka , na liniji: " + lleft, null); :} {: RESULT=new VarDeclarationDerived1(); :}
				;


				
Type ::= (ScopeResolution) IDENT COLON COLON IDENT {: RESULT=new ScopeResolution(); :}
       |
       (TypeName) IDENT {: RESULT=new TypeName(); :}
       ;		
				
MethodDeclList ::= MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListDerived1(M1, M2); RESULT.setLine(M1left); :}
				| {: RESULT=new MethodDeclListDerived2(); :}
				/* epsilon */	
				;

VarDeclList ::= VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListDerived1(V1, V2); RESULT.setLine(V1left); :}
			| {: RESULT=new VarDeclListDerived2(); :}
			/* epsilon */
			;
				
MethodDecl ::= MethodReturnTypeAndName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4  RBRACE {: RESULT=new MethodDeclDerived1(M1, F2, V3, S4); RESULT.setLine(M1left); :};		
				
MethodReturnTypeAndName ::= VOID IDENT {: RESULT=new MethodReturnTypeAndNameDerived1(); :}
						|
						Type:T1 IDENT {: RESULT=new MethodReturnTypeAndNameDerived2(T1); RESULT.setLine(T1left); :}
						;
								
FormPars ::= (FormParsExist) FormalParams:F1 {: RESULT=new FormParsExist(F1); RESULT.setLine(F1left); :}
			|
			(NoFormalParams) {: RESULT=new NoFormalParams(); :} /* epsilon */
			;			
				
FormalParams ::= (FormalParamsList) FormalParams:F1 COMMA FormalParam:F2 {: RESULT=new FormalParamsList(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParam) FormalParam:F1 {: RESULT=new SingleFormalParam(F1); RESULT.setLine(F1left); :}
				;  			
				
FormalParam ::= (VariableFormalParam) Type:T1 IDENT {: RESULT=new VariableFormalParam(T1); RESULT.setLine(T1left); :}
			|
			(ArrayFormalParam) Type:T1 IDENT LBRACKET RBRACKET {: RESULT=new ArrayFormalParam(T1); RESULT.setLine(T1left); :}
			; 			

/*	****************************************		*/
				
StatementList ::= StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :}
				| {: RESULT=new StatementListDerived2(); :}
				/* epsilon */		
				;		

Statement ::= DesignatorStatement:D1 {: RESULT=new StatementDerived1(D1); RESULT.setLine(D1left); :}
			|
			IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new StatementDerived2(C1, S2); RESULT.setLine(C1left); :}
			|
			IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new StatementDerived3(C1, S2, S3); RESULT.setLine(C1left); :}
			|
			BREAK SEMICOLON {: RESULT=new StatementDerived4(); :}
			|
			CONTINUE SEMICOLON {: RESULT=new StatementDerived5(); :}
			|
			RETURN SEMICOLON {: RESULT=new StatementDerived6(); :}
			|
			RETURN Expr:E1 SEMICOLON {: RESULT=new StatementDerived7(E1); RESULT.setLine(E1left); :}
			|
			READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new StatementDerived8(D1); RESULT.setLine(D1left); :}
			|
			PRINT LPAREN Expr:E1 RPAREN SEMICOLON {: RESULT=new StatementDerived9(E1); RESULT.setLine(E1left); :}
			|
			PRINT LPAREN Expr:E1 COMMA NUMBER RPAREN SEMICOLON {: RESULT=new StatementDerived10(E1); RESULT.setLine(E1left); :}
			|
			LBRACE StatementList:S1 RBRACE {: RESULT=new StatementDerived11(S1); RESULT.setLine(S1left); :}
			;

			
DesignatorStatement ::= Designator:D1 Assignop:A2 Expr:E3 SEMICOLON {: RESULT=new DesignatorStatementDerived1(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					Designator:D1 LPAREN ActParsOptional:A2 RPAREN SEMICOLON {: RESULT=new DesignatorStatementDerived2(D1, A2); RESULT.setLine(D1left); :}
					|
					Designator:D1 INC SEMICOLON {: RESULT=new DesignatorStatementDerived3(D1); RESULT.setLine(D1left); :}
					|
					Designator:D1 DEC SEMICOLON {: RESULT=new DesignatorStatementDerived4(D1); RESULT.setLine(D1left); :}
					|
					error SEMICOLON:l 
					{: parser.report_error("oporavak od greske za iskaz dodele do znaka ; na liniji: " + lleft, null); :} {: RESULT=new DesignatorStatementDerived5(); :}
					;

Designator ::= IDENT COLON COLON IDENT {: RESULT=new DesignatorDerived1(); :}
			|
			IDENT {: RESULT=new DesignatorDerived2(); :} 
			|
			Designator:D1 DOT IDENT {: RESULT=new DesignatorDerived3(D1); RESULT.setLine(D1left); :}
			|
			Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorDerived4(D1, E2); RESULT.setLine(D1left); :}
			;

Expr ::= MINUS Term:T1 {: RESULT=new ExprDerived1(T1); RESULT.setLine(T1left); :}
        |
        Term:T1 {: RESULT=new ExprDerived2(T1); RESULT.setLine(T1left); :}
        |
        Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprDerived3(E1, A2, T3); RESULT.setLine(E1left); :}
        ;
        
Term ::= Factor:F1 {: RESULT=new TermDerived1(F1); RESULT.setLine(F1left); :}
		|
		Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermDerived2(T1, M2, F3); RESULT.setLine(T1left); :}
		;
		
Factor ::= NUMBER {: RESULT=new FactorDerived1(); :}
		|
		CHAR {: RESULT=new FactorDerived2(); :}
		|
		BOOL {: RESULT=new FactorDerived3(); :}
		|
		DesignatorFactor:D1 {: RESULT=new FactorDerived4(D1); RESULT.setLine(D1left); :}
		|
		NewFactor:N1 {: RESULT=new FactorDerived5(N1); RESULT.setLine(N1left); :}
		|
		ExprFactor:E1 {: RESULT=new FactorDerived6(E1); RESULT.setLine(E1left); :}
		;
		
DesignatorFactor ::= Designator:D1 {: RESULT=new DesignatorFactorDerived1(D1); RESULT.setLine(D1left); :}
					|
					Designator:D1 LPAREN ActParsOptional:A2 RPAREN {: RESULT=new DesignatorFactorDerived2(D1, A2); RESULT.setLine(D1left); :}
					;
					
NewFactor ::= NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewFactorDerived1(T1, E2); RESULT.setLine(T1left); :}
			|
			NEW Type:T1 LPAREN ActParsOptional:A2 RPAREN {: RESULT=new NewFactorDerived2(T1, A2); RESULT.setLine(T1left); :}
			;
			
ExprFactor ::= LPAREN Expr:E1 RPAREN {: RESULT=new ExprFactorDerived1(E1); RESULT.setLine(E1left); :};


ActParsOptional ::= ActPars:A1 {: RESULT=new ActParsOptionalDerived1(A1); RESULT.setLine(A1left); :}
		| {: RESULT=new ActParsOptionalDerived2(); :}
		/* epsilon */
		;

ActPars ::= Expr:E1 {: RESULT=new ActParsDerived1(E1); RESULT.setLine(E1left); :}
		|
		ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsDerived2(A1, E2); RESULT.setLine(A1left); :}
		;	
		
StaticInitializer ::= STATIC LBRACE StatementList:S1 RBRACE {: RESULT=new StaticInitializerDerived1(S1); RESULT.setLine(S1left); :};
		
/* *********************************************** */	

Condition ::= CondTerm:C1 {: RESULT=new ConditionDerived1(C1); RESULT.setLine(C1left); :} 
			|
			Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionDerived2(C1, C2); RESULT.setLine(C1left); :}
			;

CondTerm ::= CondFact:C1 {: RESULT=new CondTermDerived1(C1); RESULT.setLine(C1left); :} 
			|
			CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermDerived2(C1, C2); RESULT.setLine(C1left); :}
			;

CondFact ::= Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactDerived1(E1, R2, E3); RESULT.setLine(E1left); :}
			|
			Expr:E1 {: RESULT=new CondFactDerived2(E1); RESULT.setLine(E1left); :}
			;
			

/* *********************************************** */

Label ::= IDENT {: RESULT=new LabelDerived1(); :};

Assignop ::= ASSIGN {: RESULT=new AssignopDerived1(); :};
				
Relop ::= EQUAL {: RESULT=new RelopDerived1(); :}
        |
        NOT_EQUAL {: RESULT=new RelopDerived2(); :}
        |
        GREATER {: RESULT=new RelopDerived3(); :}
        |
        GREATER_EQUAL {: RESULT=new RelopDerived4(); :}
        |
        LESS {: RESULT=new RelopDerived5(); :}
        |
        LESS_EQUAL {: RESULT=new RelopDerived6(); :}
        ;			
				
Addop ::= PLUS {: RESULT=new AddopDerived1(); :}
        |
        MINUS {: RESULT=new AddopDerived2(); :}	
        ;			
				
Mulop ::= MUL {: RESULT=new MulopDerived1(); :}
        |
        DIV {: RESULT=new MulopDerived2(); :}
        |
        MOD {: RESULT=new MulopDerived3(); :}
        ;				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				