package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	errorDetected = true;
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


init with {:
	errorDetected = false;
:}



/* ------------------------ TERMINALS ----------------------------- */

terminal PROGRAM, IDENT, LBRACE, RBRACE, CONST, SEMICOLON, NUMBER, CHAR, BOOL, COMMA, LBRACKET, RBRACKET, ASSIGN, VOID, MINUS, INC, DEC, OR, AND;
terminal IF, ELSE, NEW, BREAK, CONTINUE, RETURN, PLUS, RPAREN, STATIC, DIV, NOT_EQUAL, ARROW, LPAREN, EQUAL, LESS, MOD, MUL, GREATER, GREATER_EQUAL, LESS_EQUAL;
terminal READ, PRINT, COLON;

/* terminals needed because of Yylex.java*/

terminal FOR, EXTENDS, DOT;
terminal RANGE, NAMESPACE, CLASS;

/* ------------------------ NONTERMINALS ----------------------------- */

nonterminal Program Program;
nonterminal DeclarationList DeclarationList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ConstAssign ConstAssign;
nonterminal ConstAssignList ConstAssignList;
nonterminal Type Type;
nonterminal VarDeclaration VarDeclaration;
nonterminal VarDeclarations VarDeclarations;
nonterminal MethodDecl MethodDecl;
nonterminal VarDeclList VarDeclList;
nonterminal StatementList StatementList;
nonterminal FormPars FormPars;
nonterminal FormalParam FormalParam;
nonterminal FormalParams FormalParams;
nonterminal MethodReturnTypeAndName MethodReturnTypeAndName;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Designator Designator;
nonterminal  Expr Expr;
nonterminal Label Label;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal DesignatorFactor DesignatorFactor;
nonterminal NewFactor NewFactor;
nonterminal ExprFactor ExprFactor;
nonterminal ActParsOptional ActParsOptional;
nonterminal ActPars ActPars;
nonterminal StaticInitializer StaticInitializer;
nonterminal CondFact CondFact;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal FinalVarDeclaration FinalVarDeclaration;
nonterminal Relop Relop;
nonterminal Assignop Assignop;
nonterminal Addop Addop;
nonterminal Mulop Mulop; 


/* can be used only for this case*/
precedence left ELSE;

/* ------------------------ GRAMMAR ----------------------------- */

Program ::= (Program) PROGRAM IDENT:programName DeclarationList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(D1, M2); RESULT.setLine(D1left); :};

DeclarationList ::= (DeclarationListConst) DeclarationList:D1 ConstDecl:C2 {: RESULT=new DeclarationListConst(D1, C2); RESULT.setLine(D1left); :}
                |
                (DeclarationListVar) DeclarationList:D1 VarDecl:V2 {: RESULT=new DeclarationListVar(D1, V2); RESULT.setLine(D1left); :}
                |
                (NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */
                ;
                
ConstDecl ::= (ConstDeclaration) CONST Type:constType IDENT:constIdent ASSIGN ConstAssign:C1 ConstAssignList:C2 SEMICOLON {: RESULT=new ConstDeclaration(constType, C1, C2); RESULT.setLine(constTypeleft); :};

ConstAssign ::= (NumberConstValue) NUMBER {: RESULT=new NumberConstValue(); :}
			|
			(CharConstValue) CHAR {: RESULT=new CharConstValue(); :}
			|
			(BoolConstValue) BOOL {: RESULT=new BoolConstValue(); :}
			;

ConstAssignList ::= (ConstAssignmentList) ConstAssignList:C1 COMMA IDENT ASSIGN ConstAssign:C2 {: RESULT=new ConstAssignmentList(C1, C2); RESULT.setLine(C1left); :}
				|
				(NoConstAssignmentList) {: RESULT=new NoConstAssignmentList(); :} /* epsilon */
				;

VarDecl ::= (VarDecl) Type:T1 VarDeclarations:V2 {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :};

VarDeclarations ::= (MultipleVarDeclaration) VarDeclaration:V1 VarDeclarations:V2 {: RESULT=new MultipleVarDeclaration(V1, V2); RESULT.setLine(V1left); :}
				|
				(SingleVarDeclaration) FinalVarDeclaration:F1 {: RESULT=new SingleVarDeclaration(F1); RESULT.setLine(F1left); :}
				;

		
FinalVarDeclaration ::= (VarDeclFinalElem) IDENT SEMICOLON {: RESULT=new VarDeclFinalElem(); :}
					|
					(VarDeclArrayFinal) IDENT LBRACKET RBRACKET SEMICOLON {: RESULT=new VarDeclArrayFinal(); :}
					|
					(VarDeclErrorSemi) error SEMICOLON:l
					{: parser.report_error("oporavak od greske za definiciju globalne promenljive do znaka ; na liniji: " + lleft, null); :} {: RESULT=new VarDeclErrorSemi(); :}
					;
					

VarDeclaration ::= (VarDeclNextElem) IDENT COMMA {: RESULT=new VarDeclNextElem(); :}
				| 
				(VarDeclNextArray) IDENT LBRACKET RBRACKET COMMA {: RESULT=new VarDeclNextArray(); :}
				|
				(VarDeclErrorComma) error COMMA:l 
				{: parser.report_error("oporavak od greske za definiciju globalne promenljive do znaka , na liniji: " + lleft, null); :} {: RESULT=new VarDeclErrorComma(); :}
				;


				
Type ::= (ScopeResolution) IDENT COLON COLON IDENT {: RESULT=new ScopeResolution(); :}
       |
       (TypeName) IDENT {: RESULT=new TypeName(); :}
       ;		
				
MethodDeclList ::= (MethodDeclarationList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarationList(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDeclarationList) {: RESULT=new NoMethodDeclarationList(); :} /* epsilon */	
				;

VarDeclList ::= (VarDeclarationList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarationList(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoVarDeclarationList) {: RESULT=new NoVarDeclarationList(); :} /* epsilon */
			;
				
MethodDecl ::= (MethodDeclaration) MethodReturnTypeAndName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4  RBRACE {: RESULT=new MethodDeclaration(M1, F2, V3, S4); RESULT.setLine(M1left); :};		
				
MethodReturnTypeAndName ::= (MethodReturnTypeVoid) VOID IDENT {: RESULT=new MethodReturnTypeVoid(); :}
						|
						(MethodReturnTypeNoVoid) Type:T1 IDENT {: RESULT=new MethodReturnTypeNoVoid(T1); RESULT.setLine(T1left); :}
						;
								
FormPars ::= (FormParsExist) FormalParams:F1 {: RESULT=new FormParsExist(F1); RESULT.setLine(F1left); :}
			|
			(NoFormalParams) {: RESULT=new NoFormalParams(); :} /* epsilon */
			;			
				
FormalParams ::= (FormalParamsList) FormalParams:F1 COMMA FormalParam:F2 {: RESULT=new FormalParamsList(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParam) FormalParam:F1 {: RESULT=new SingleFormalParam(F1); RESULT.setLine(F1left); :}
				;  			
				
FormalParam ::= (VariableFormalParam) Type:T1 IDENT {: RESULT=new VariableFormalParam(T1); RESULT.setLine(T1left); :}
			|
			(ArrayFormalParam) Type:T1 IDENT LBRACKET RBRACKET {: RESULT=new ArrayFormalParam(T1); RESULT.setLine(T1left); :}
			; 			

/*	****************************************		*/
				
StatementList ::= (StatementListExist) StatementList:S1 Statement:S2 {: RESULT=new StatementListExist(S1, S2); RESULT.setLine(S1left); :}
				|
				(StatementListDoesntExist) {: RESULT=new StatementListDoesntExist(); :} /* epsilon */		
				;		

Statement ::= (StatementDesignatorStatement) DesignatorStatement:D1 {: RESULT=new StatementDesignatorStatement(D1); RESULT.setLine(D1left); :}
			|
			(StatementIf) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new StatementIf(C1, S2); RESULT.setLine(C1left); :}
			|
			(StatementIfElse) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new StatementIfElse(C1, S2, S3); RESULT.setLine(C1left); :}
			|
			(StatementBreak) BREAK SEMICOLON {: RESULT=new StatementBreak(); :}
			|
			(StatementContinue) CONTINUE SEMICOLON {: RESULT=new StatementContinue(); :}
			|
			(StatementReturn) RETURN SEMICOLON {: RESULT=new StatementReturn(); :}
			|
			(StatementReturnWithExpr) RETURN Expr:E1 SEMICOLON {: RESULT=new StatementReturnWithExpr(E1); RESULT.setLine(E1left); :}
			|
			(StatementRead) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
			|
			(StatementPrintExpr) PRINT LPAREN Expr:E1 RPAREN SEMICOLON {: RESULT=new StatementPrintExpr(E1); RESULT.setLine(E1left); :}
			|
			(StatementPrintExprNumber) PRINT LPAREN Expr:E1 COMMA NUMBER RPAREN SEMICOLON {: RESULT=new StatementPrintExprNumber(E1); RESULT.setLine(E1left); :}
			|
			(StatementStatementList) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementStatementList(S1); RESULT.setLine(S1left); :}
			;


DesignatorStatement ::= (DesignatorStatementAssign) Designator:D1 Assignop:A2 Expr:E3 SEMICOLON {: RESULT=new DesignatorStatementAssign(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementMethod) Designator:D1 LPAREN ActParsOptional:A2 RPAREN SEMICOLON {: RESULT=new DesignatorStatementMethod(D1, A2); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementInc) Designator:D1 INC SEMICOLON {: RESULT=new DesignatorStatementInc(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementDec) Designator:D1 DEC SEMICOLON {: RESULT=new DesignatorStatementDec(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorStatementErrorSemi) error SEMICOLON:l 
					{: parser.report_error("oporavak od greske za iskaz dodele do znaka ; na liniji: " + lleft, null); :} {: RESULT=new DesignatorStatementErrorSemi(); :}
					;

Designator ::= (Designator) IDENT COLON COLON IDENT {: RESULT=new Designator(); :}
			|
			(DesignatorIdent) IDENT {: RESULT=new DesignatorIdent(); :} 
			|
			(DesignatorDotAccess) Designator:D1 DOT IDENT {: RESULT=new DesignatorDotAccess(D1); RESULT.setLine(D1left); :}
			|
			(DesignatorArray) Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArray(D1, E2); RESULT.setLine(D1left); :}
			;

Expr ::= (ExprMinusTerm) MINUS Term:T1 {: RESULT=new ExprMinusTerm(T1); RESULT.setLine(T1left); :}
        |
        (ExprTerm) Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :}
        |
        (ExprAdd) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprAdd(E1, A2, T3); RESULT.setLine(E1left); :}
        ;
        
Term ::= (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :}
		|
		(TermMul) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMul(T1, M2, F3); RESULT.setLine(T1left); :}
		;
		
Factor ::= (FactorNumber) NUMBER {: RESULT=new FactorNumber(); :}
		|
		(FactorChar) CHAR {: RESULT=new FactorChar(); :}
		|
		(FactorBool) BOOL {: RESULT=new FactorBool(); :}
		|
		(FactorDesignatorFactor) DesignatorFactor:D1 {: RESULT=new FactorDesignatorFactor(D1); RESULT.setLine(D1left); :}
		|
		(FactorNewFactor) NewFactor:N1 {: RESULT=new FactorNewFactor(N1); RESULT.setLine(N1left); :}
		|
		(FactorExprFactor) ExprFactor:E1 {: RESULT=new FactorExprFactor(E1); RESULT.setLine(E1left); :}
		;
		
DesignatorFactor ::= (DesignatorFactorDesignator) Designator:D1 {: RESULT=new DesignatorFactorDesignator(D1); RESULT.setLine(D1left); :}
					|
					(DesignatorFactorMethod) Designator:D1 LPAREN ActParsOptional:A2 RPAREN {: RESULT=new DesignatorFactorMethod(D1, A2); RESULT.setLine(D1left); :}
					;
					
NewFactor ::= (NewFactorArray) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new NewFactorArray(T1, E2); RESULT.setLine(T1left); :}
			|
			(NewFactorMethod) NEW Type:T1 LPAREN ActParsOptional:A2 RPAREN {: RESULT=new NewFactorMethod(T1, A2); RESULT.setLine(T1left); :}
			;
			
ExprFactor ::= (ExprFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ExprFactor(E1); RESULT.setLine(E1left); :};


ActParsOptional ::= (ActParsExist) ActPars:A1 {: RESULT=new ActParsExist(A1); RESULT.setLine(A1left); :}
		|
		(NoActPars) {: RESULT=new NoActPars(); :} /* epsilon */
		;

ActPars ::= (SingleActParsExpr) Expr:E1 {: RESULT=new SingleActParsExpr(E1); RESULT.setLine(E1left); :}
		|
		(ActParsList) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsList(A1, E2); RESULT.setLine(A1left); :}
		;	
		
StaticInitializer ::= (StaticInit) STATIC LBRACE StatementList:S1 RBRACE {: RESULT=new StaticInit(S1); RESULT.setLine(S1left); :};
		
/* *********************************************** */	

Condition ::= (ConditionCondTerm) CondTerm:C1 {: RESULT=new ConditionCondTerm(C1); RESULT.setLine(C1left); :} 
			|
			(ConditionOr) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionOr(C1, C2); RESULT.setLine(C1left); :}
			;

CondTerm ::= (CondTermFactor) CondFact:C1 {: RESULT=new CondTermFactor(C1); RESULT.setLine(C1left); :} 
			|
			(CondTermAnd) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermAnd(C1, C2); RESULT.setLine(C1left); :}
			;

CondFact ::= (CondFactMultiple) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactMultiple(E1, R2, E3); RESULT.setLine(E1left); :}
			|
			(CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :}
			;
			

/* *********************************************** */

Label ::= (Label) IDENT {: RESULT=new Label(); :};

Assignop ::= (AssignOperator) ASSIGN {: RESULT=new AssignOperator(); :};
				
Relop ::= (EqualOperator) EQUAL {: RESULT=new EqualOperator(); :}
        |
        (NotEqualOperator) NOT_EQUAL {: RESULT=new NotEqualOperator(); :}
        |
        (GreaterOperator) GREATER {: RESULT=new GreaterOperator(); :}
        |
        (GreaterEqualOperator) GREATER_EQUAL {: RESULT=new GreaterEqualOperator(); :}
        |
        (LessOperator) LESS {: RESULT=new LessOperator(); :}
        |
        (LessEqualOperator) LESS_EQUAL {: RESULT=new LessEqualOperator(); :}
        ;			
				
Addop ::= (PlusOperator) PLUS {: RESULT=new PlusOperator(); :}
        |
        (MinusOperator) MINUS {: RESULT=new MinusOperator(); :}	
        ;			
				
Mulop ::= (MulOperator) MUL {: RESULT=new MulOperator(); :}
        |
        (DivOperator) DIV {: RESULT=new DivOperator(); :}
        |
        (ModOperator) MOD {: RESULT=new ModOperator(); :}
        ;				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				